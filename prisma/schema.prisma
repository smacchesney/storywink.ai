// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum BookStatus {
  DRAFT
  GENERATING
  COMPLETED
  FAILED
}

enum PageType {
  SINGLE
  SPREAD
}

model User {
  id        String   @id @unique
  email     String   @unique
  name      String?
  imageUrl  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  books     Book[]
  assets    Asset[]
  profile   UserProfile?
}

model Book {
  id                String     @id @default(cuid())
  userId            String
  title             String
  childName         String
  status            BookStatus @default(DRAFT)
  pageLength        Int // 8, 12, or 16
  artStyle          String?
  tone              String?
  typography        String?
  theme             String?
  keyCharacters     String?
  specialObjects    String?
  excitementElement String?
  promptTokens      Int?
  completionTokens  Int?
  totalTokens       Int?
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
  user              User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  pages             Page[]

  @@index([userId])
}

model Page {
  id                String    @id @default(cuid())
  bookId            String
  pageNumber        Int
  originalImageUrl  String?
  generatedImageUrl String?
  text              String?
  textConfirmed     Boolean?  @default(false)
  pageType          PageType
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  book              Book      @relation(fields: [bookId], references: [id], onDelete: Cascade)

  @@index([bookId])
}

model Asset {
  id        String   @id @default(cuid())
  userId    String
  url       String
  thumbnailUrl String?
  publicId  String   @unique
  fileType  String
  size      Int
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model UserProfile {
  id        String   @id @default(cuid())
  userId    String   @unique
  firstName String?
  lastName  String?
  bio       String?
  dateOfBirth DateTime?
  location  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
